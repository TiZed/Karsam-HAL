# kinematics
loadrt trivkins

# trajectory planner
loadrt tp

# motion controller, get name and thread periods from ini file
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[TRAJ]AXES kins=trivkins tp=tp

# Some logic gates for EMO
loadrt or2 count=1
loadrt not count=1

# Debounce
# loadrt debounce count=6

# Karsam module
loadrt karsam num_axes=3 axis_name=x,y,z num_pwm=1

addf motion-command-handler servo-thread
addf motion-controller servo-thread
addf karsam.update servo-thread
addf or2.0 servo-thread
addf not.0 servo-thread

setp karsam.base_frequency [EMCMOT]BASE_FREQUENCY

# X - Axis
setp karsam.axis.0.position-scale [AXIS_0]SCALE
setp karsam.axis.0.maxaccel [AXIS_0]MAX_ACCELERATION
setp karsam.axis.0.maxvel [AXIS_0]MAX_VELOCITY

net xpos_cmd axis.0.motor-pos-cmd => karsam.axis.0.position-cmd
net xpos_fb axis.0.motor-pos-fb <= karsam.axis.0.position-fb 

net xpos-en axis.0.amp-enable-out => karsam.axis.0.enable
net xpos-fault axis.0.amp-fault-in <= karsam.axis.0.fault

# net xpos-home-raw karsam.axis.0.home => debounce.0.0.in
# net xpos-limit-raw karsam.axis.0.limit => debounce.0.1.in

# net xpos-home debounce.0.0.out => axis.0.home-sw-in
# net xpos-home debounce.0.0.out => axis.0.neg-lim-sw-in
# net xpos-max-limit debounce.0.1.out => axis.0.pos-lim-sw-in

net xpos-home karsam.axis.0.home => axis.0.home-sw-in axis.0.neg-lim-sw-in
net xpos-limit karsam.axis.0.limit => axis.0.pos-lim-sw-in

# Y - Axis
setp karsam.axis.1.position-scale [AXIS_1]SCALE
setp karsam.axis.1.maxaccel [AXIS_1]MAX_ACCELERATION
setp karsam.axis.1.maxvel [AXIS_1]MAX_VELOCITY

net ypos-cmd axis.1.motor-pos-cmd => karsam.axis.1.position-cmd
net ypos-fb karsam.axis.1.position-fb => axis.1.motor-pos-fb

net ypos-en axis.1.amp-enable-out => karsam.axis.1.enable
net ypos-fault axis.1.amp-fault-in <= karsam.axis.1.fault

# net ypos-home-raw karsam.axis.1.home => debounce.0.2.in
# net ypos-limit-raw karsam.axis.1.limit => debounce.0.3.in

# net ypos-home debounce.0.2.out => axis.1.home-sw-in
# net ypos-home debounce.0.2.out => axis.1.neg-lim-sw-in
# net ypos-max-limit debounce.0.3.out => axis.1.pos-lim-sw-in

net ypos-home karsam.axis.1.home => axis.1.home-sw-in
net ypos-home karsam.axis.1.home => axis.1.neg-lim-sw-in
net ypos-limit karsam.axis.1.limit => axis.1.pos-lim-sw-in

# Z - Axis
setp karsam.axis.2.position-scale [AXIS_2]SCALE
setp karsam.axis.2.maxaccel [AXIS_2]MAX_ACCELERATION
setp karsam.axis.2.maxvel [AXIS_2]MAX_VELOCITY

net zpos-cmd axis.2.motor-pos-cmd => karsam.axis.2.position-cmd
net zpos-fb karsam.axis.2.position-fb => axis.2.motor-pos-fb

net zpos-en axis.2.amp-enable-out => karsam.axis.2.enable
net zpos-fault axis.2.amp-fault-in <= karsam.axis.2.fault

# net zpos-home-raw karsam.axis.2.home => debounce.0.4.in
# net zpos-limit-raw karsam.axis.2.limit => debounce.0.5.in

# net zpos-home debounce.0.4.out => axis.2.home-sw-in
# net zpos-home debounce.0.4.out => axis.2.neg-lim-sw-in
# net zpos-max-limit debounce.0.5.out => axis.2.pos-lim-sw-in

net zpos-home karsam.axis.2.home => axis.2.home-sw-in
net zpos-home karsam.axis.2.home => axis.2.neg-lim-sw-in
net zpos-limit karsam.axis.2.limit => axis.2.pos-lim-sw-in

net zpos-probe karsam.z_level => motion.probe-input

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare => iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change => iocontrol.0.tool-changed

# Spindle
# Type 0 - Regular PWM, 1 - ESC
setp karsam.pwm.0.type 1
setp karsam.pwm.0.frequency 50
setp karsam.pwm.0.scale 30000
net spindle-cmd motion.spindle-speed-out => karsam.pwm.0.value
net spindle-on motion.spindle-on => karsam.pwm.0.enable
net spindle-fwd motion.spindle-forward => karsam.pwm.0.forward
net spindle-rev motion.spindle-reverse => karsam.pwm.0.reverse

# Laser

# setp karsam.pwm.1.frequency 20000
# setp karsam.pwm.1.scale 1800
# net laser-cmd laser.power.val => karsam.pwm.1.value
# net spindle-on motion.spindle-on => karsam.pwm.1.enable

net emo_button karsam.emo => or2.0.in0
net spi_error karsam.spi_error => or2.0.in1
net not_err or2.0.out => not.0.in
net emo not.0.out => iocontrol.0.emc-enable-in

net enable iocontrol.0.user-enable-out => karsam.enable

# net estop-loop iocontrol.0.user-enable-out => iocontrol.0.emc-enable-in

